/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Func.Logging;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.System.in;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static jdk.nashorn.internal.objects.ArrayBufferView.buffer;

/**
 *
 * @author rodolfo.abreu
 */
public class jFrmLauncherUpdate extends javax.swing.JFrame {
    
    String location = "C:\\test\\";
    /**
     * Creates new form jFrmLauncherUpdate
     */
    public jFrmLauncherUpdate() {
        initComponents();
        getUpdate();
    }

    private void getUpdate() {
        try {
            String location = "C:\\SaturnoSystem\\temp\\Recebido\\";
            new File(location).mkdirs();
            Socket soc = new Socket("10.42.114.117", 5100);
            // Criar fluxo de saida
            //Cria o Socket para buscar o arquivo no servidor
            DataOutputStream dos = new DataOutputStream(soc.getOutputStream());
            dos.writeUTF("main.jar");
            //ObjectInputStream para receber o nome do arquivo
            DataInputStream dis = new DataInputStream(soc.getInputStream());
            //Recebe o nome do arquivo
            String nomeArquivo = dis.readUTF();
            //Recebe tamanho do arquivo
            int tam = dis.readInt(); 
            //Criando Fluxo de entrada
            ObjectOutputStream oos = new ObjectOutputStream(soc.getOutputStream());
            ObjectInputStream ois = new ObjectInputStream(soc.getInputStream());
            FileOutputStream fos = null;
            byte [] buffer = new byte[tam];

            // Leiturado nome do arquivo
            Object o = ois.readObject();

            if (o instanceof String) {
                fos = new FileOutputStream(location + nomeArquivo);
            } else {
                Logging.LoggingSys(null, "Erro ao instanciar Caracteres", "WARN");
            }

            // Leitura em bytes do arquivo
            Integer bytesRead = 0;

            do {
                o = ois.readObject();

                if (!(o instanceof Integer)) {
                    Logging.LoggingSys(null, "Erro ao instanciar Inteiros", "WARN");
                }

                bytesRead = (Integer)o;

                o = ois.readObject();

                if (!(o instanceof byte[])) {
                    Logging.LoggingSys(null, "Erro ao instanciar bytes", "WARN");
                }

                buffer = (byte[])o;

                // Escrevendo o arquivo
                fos.write(buffer, 0, bytesRead);

            } while (bytesRead == tam);

            System.out.println("Transferido com sucesso "+"Nome: "+nomeArquivo+" sive: "+tam);

            dos.flush();
            fos.close();
            dos.close();
            dis.close();
            ois.close();
            oos.close();
        } catch (IOException | NumberFormatException | ClassNotFoundException e) {
            Logging.LoggingSys(this.getClass(), e, "ERROR");
            JOptionPane.showMessageDialog(null, "Exceção: " + e.getMessage()
                    + "\nTivemos um problema de comunicação com o servidor."
                    + "\nPor favor, contate o suporte do sistema!", "Erro", 2);
        } 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 85, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrmLauncherUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrmLauncherUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrmLauncherUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrmLauncherUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrmLauncherUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
